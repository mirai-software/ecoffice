// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//generator erd {
//provider = "prisma-erd-generator"
//}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model city {
  id   String @id @unique @default(uuid())
  name String

  address String @default("Via Roma 1")

  calendars         calendar[]
  secondHandProduct secondHandProduct[]
  user              user[]
  SupportRequest    SupportRequest[]
  statistics        Statistic[]
  openingHours      OpeningHour[] // Aggiunta relazione con OpeningHour
  reports           report[]
  pickups           pickup[]
  // da definire un ulteriore tabella per i recapiti.
  whatsappNumber    String? // momentanemente stringa, da definire un tipo più appropriato 
  email             String? // momentanemente stringa, da definire un tipo più appropriato

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpeningHour {
  id         String  @id @unique @default(uuid())
  day        Weekday
  isOpen     Boolean @default(true)
  openTime1  String // Prima fascia oraria di apertura
  closeTime1 String // Prima fascia oraria di chiusura
  openTime2  String? // Seconda fascia oraria di apertura (opzionale)
  closeTime2 String? // Seconda fascia oraria di chiusura (opzionale)
  cityId     String
  city       city    @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([day, cityId]) // Aggiunta combinazione unica di day e cityId
}

model Statistic {
  id     String        @id @unique @default(uuid())
  name   String
  data   String
  type   StatisticType
  cityId String
  city   city          @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum per i tipi di statistiche
enum StatisticType {
  ProductionIndicator // Indicatori di Produzione
  SpecificIndicator // Indicatori Specifici
}

// Tabella di join per la relazione molti-a-molti
model calendar {
  id         String              @id @unique @default(uuid())
  day        Weekday
  cityId     String
  city       city                @relation(fields: [cityId], references: [id])
  wasteTypes CalendarWasteType[] // Modifica per relazione molti-a-molti

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WasteCategory {
  Commercial
  Citizen
}

model wasteType {
  id        String              @id @unique @default(uuid())
  name      String
  color     String
  category  WasteCategory       @default(Citizen)
  info      String[]            @default([])
  icon      String              @default("default")
  calendars CalendarWasteType[] // Modifica per relazione molti-a-molti

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabella di join per la relazione molti-a-molti
model CalendarWasteType {
  calendarId  String    @default(uuid())
  calendar    calendar  @relation(fields: [calendarId], references: [id])
  wasteTypeId String
  wasteType   wasteType @relation(fields: [wasteTypeId], references: [id])

  @@id([calendarId, wasteTypeId])
}

model secondHandProduct {
  id String @id @unique @default(uuid())

  name        String
  description String
  price       Float
  images      String[] // array of image urls
  status      String   @default("Online")

  city   city   @relation(fields: [cityId], references: [id])
  cityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

enum Role {
  user
  editor
  admin
}

model user {
  id    String  @id @unique @default(uuid())
  email String  @unique
  phone String? @unique

  role      Role
  firstName String?
  lastName  String?
  city      city?   @relation(fields: [cityId], references: [id])
  cityId    String?
  address   String?

  reports        report[] // Array di Segnalazioni
  pickup         pickup[] // Array di Ritiri a Domicilio
  SupportRequest SupportRequest[]

  SignInCompleted Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  SupportMessage  SupportMessage[]

  @@index([id])
}

// Segnalazione
model report {
  id     String @id @unique @default(uuid())
  number Int    @default(autoincrement())

  address    String
  type       String
  otherSpecs String? // if The type is "other" this field is required to specify the type
  status     String
  images     String[] // array of image urls

  user   user   @relation(fields: [userId], references: [id])
  userId String

  city   city   @relation(fields: [cityId], references: [id])
  cityId String @default("c3092b4f-9abd-47bb-b99c-d4b6bacdde41") // per non distruggere i dati esistenti

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

// Ritiro a Domilicio
model pickup {
  id         String   @id @unique @default(uuid())
  number     Int      @default(autoincrement())
  address    String
  type       String
  otherSpecs String? // if The type is "other" this field is required to specify the type
  status     String
  images     String[] // array of image urls

  user   user   @relation(fields: [userId], references: [id])
  userId String

  city   city   @relation(fields: [cityId], references: [id])
  cityId String @default("c3092b4f-9abd-47bb-b99c-d4b6bacdde41") // per non distruggere i dati esistenti

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

// Richiesta di Supporto
model SupportRequest {
  id       String           @id @unique @default(uuid())
  status   String // Stati possibili: "open", "closed"
  userId   String
  user     user             @relation(fields: [userId], references: [id])
  cityId   String
  city     city             @relation(fields: [cityId], references: [id])
  messages SupportMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Messaggi di Supporto
model SupportMessage {
  id               String         @id @unique @default(uuid())
  content          String
  supportRequestId String
  supportRequest   SupportRequest @relation(fields: [supportRequestId], references: [id])

  user   user   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
